#-------------------------------------------------------------------------
# GIT
#-------------------------------------------------------------------------

# Get current branch in git repo

function parse_git_branch() {
  BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ ! "${BRANCH}" == "" ]
  then
    STAT=`parse_git_dirty`
    echo " ${BRANCH}${STAT}"
  else
    echo ""
  fi
}

# Get current status of git repo

function parse_git_dirty {
  status=`git status 2>&1 | tee`
  dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
  untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
  ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
  newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
  renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
  deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
  bits=''
  if [ "${renamed}" == "0" ]; then
    bits=">${bits}"
  fi
  if [ "${ahead}" == "0" ]; then
    bits="*${bits}"
  fi
  if [ "${newfile}" == "0" ]; then
    bits="+${bits}"
  fi
  if [ "${untracked}" == "0" ]; then
    bits="?${bits}"
  fi
  if [ "${deleted}" == "0" ]; then
    bits="x${bits}"
  fi
  if [ "${dirty}" == "0" ]; then
    bits="!${bits}"
  fi
  if [ ! "${bits}" == "" ]; then
    echo " ${bits}"
  else
    echo ""
  fi
}

#-------------------------------------------------------------------------
# Terraform
#-------------------------------------------------------------------------

# Get current workspace

function terraform_workspace()
{
    if [ -d .terraform ]; then
        workspace="$(command terraform workspace show 2>/dev/null)"
        echo " ${workspace}"
    fi
}

#-------------------------------------------------------------------------
# Kubernetes
#-------------------------------------------------------------------------

# Get current context

function kubernetes_context() {
  local context=`kubectx -c 2> /dev/null`

  if [ ! "${context}" == "" ]; then
      echo -n "${context}"
  else
      echo -n ""
  fi
}

# Get current namespace

function kubernetes_namespace() {
  local namespace=`kubens -c 2> /dev/null`

  if [ ! "${namespace}" == "" ]; then
      echo -n "${namespace}"
  else
      echo -n ""
  fi
}

function kubernetes_prompt() {
  if [ -z "$(kubernetes_context)$(kubernetes_namespace)" ]; then
    echo -n ""
  else
    echo " $(kubernetes_context):$(kubernetes_namespace)"
  fi
}

#-------------------------------------------------------------------------
# Fancy PWD display function
#-------------------------------------------------------------------------

# The home directory (HOME) is replaced with a ~
# The last pwdmaxlen characters of the PWD are displayed
# Leading partial directory names are striped off
# /home/me/stuff          -> ~/stuff               if USER=me
# /usr/share/big_dir_name -> ../share/big_dir_name if pwdmaxlen=20

bash_prompt_command() {
    # How many characters of the $PWD should be kept
    local pwdmaxlen=25
    # Indicate that there has been dir truncation
    local trunc_symbol=".."
    local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
    NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
    if [ ${pwdoffset} -gt "0" ]
    then
        NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
        NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi
}

bash_prompt() {

    # default term's fg color
    local NONE="\[\033[0m\]"
    
    # regular colors
    local K="\[\033[0;30m\]"    # black
    local R="\[\033[0;31m\]"    # red
    local G="\[\033[0;32m\]"    # green
    local Y="\[\033[0;33m\]"    # yellow
    local B="\[\033[0;34m\]"    # blue
    local M="\[\033[0;35m\]"    # magenta
    local C="\[\033[0;36m\]"    # cyan
    local W="\[\033[0;37m\]"    # white
    local P="\[\033[38;5;99m\]"   # purple
    
    # emphasized (bolded) colors
    local EMK="\[\033[1;30m\]"
    local EMR="\[\033[1;31m\]"
    local EMG="\[\033[1;32m\]"
    local EMY="\[\033[1;33m\]"
    local EMB="\[\033[1;34m\]"
    local EMM="\[\033[1;35m\]"
    local EMC="\[\033[1;36m\]"
    local EMW="\[\033[1;37m\]"
    local EMP="\[\033[38;5;99m\]\[\033[1m\]"
    
    # background colors
    local BGK="\[\033[40m\]"
    local BGR="\[\033[41m\]"
    local BGG="\[\033[42m\]"
    local BGY="\[\033[43m\]"
    local BGB="\[\033[44m\]"
    local BGM="\[\033[45m\]"
    local BGC="\[\033[46m\]"
    local BGW="\[\033[47m\]"
    local BGP="\[\033[48;5;99m\]"
    
    # user's color
    local UC=$EMK

    # root's color
    [ $UID -eq "0" ] && UC=$EMR

    # custom prompt blocks
    local TITLE_BLOCK="${EMG}\u@\h${NONE}"
    local PWD_BLOCK="${EMG}\${NEW_PWD}"
    local GIT_BLOCK="${R}\`parse_git_branch\`${NONE}"
    local TF_BLOCK="${P}\`terraform_workspace\`${NONE}"
    local KUBE_BLOCK="${B}\`kubernetes_prompt\`${NONE}"
    local END_BLOCK=" ${G}\$${NONE} "

    # prompt setting
    PS1="${TITLE_BLOCK}:${PWD_BLOCK}${GIT_BLOCK}${TF_BLOCK}${KUBE_BLOCK}${END_BLOCK}"
}

PROMPT_COMMAND=bash_prompt_command
bash_prompt
unset bash_prompt

#-------------------------------------------------------------------------
# LS colors
#-------------------------------------------------------------------------

#bd = (BLOCK, BLK)   Block device (buffered) special file
#cd = (CHAR, CHR)    Character device (unbuffered) special file
#di = (DIR)  Directory
#do = (DOOR) [Door][1]
#ex = (EXEC) Executable file (ie. has 'x' set in permissions)
#fi = (FILE) Normal file
#ln = (SYMLINK, LINK, LNK)   Symbolic link. If you set this to ‘target’ instead of a numerical value, the color is as for the file pointed to.
#mi = (MISSING)  Non-existent file pointed to by a symbolic link (visible when you type ls -l)
#no = (NORMAL, NORM) Normal (non-filename) text. Global default, although everything should be something
#or = (ORPHAN)   Symbolic link pointing to an orphaned non-existent file
#ow = (OTHER_WRITABLE)   Directory that is other-writable (o+w) and not sticky
#pi = (FIFO, PIPE)   Named pipe (fifo file)
#sg = (SETGID)   File that is setgid (g+s)
#so = (SOCK) Socket file
#st = (STICKY)   Directory with the sticky bit set (+t) and not other-writable
#su = (SETUID)   File that is setuid (u+s)
#tw = (STICKY_OTHER_WRITABLE)    Directory that is sticky and other-writable (+t,o+w)
#*.extension =   Every file using this extension e.g. *.rpm = files with the ending .rpm

ls_colors='di=0;34:'

LS_COLORS=$ls_colors
export LS_COLORS

#-------------------------------------------------------------------------
# Aliases
#-------------------------------------------------------------------------

[[ -f ~/.bash_aliases ]] && . ~/.bash_aliases

#-------------------------------------------------------------------------
# Completions
#-------------------------------------------------------------------------

# AWS CLI
complete -C '/usr/local/bin/aws_completer' aws

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Kubectl
source <(kubectl completion bash)
complete -F __start_kubectl k
